<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>therain2020</title><link>https://therain2020.github.io</link><description>the path to future</description><copyright>therain2020</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://therain2020.github.io</link></image><lastBuildDate>Mon, 28 Apr 2025 12:36:51 +0000</lastBuildDate><managingEditor>therain2020</managingEditor><ttl>60</ttl><webMaster>therain2020</webMaster><item><title>软件测试面经</title><link>https://therain2020.github.io/post/ruan-jian-ce-shi-mian-jing.html</link><description>### 测试工作是怎么进行的

&gt; [!NOTE]
&gt;  根据需求规格说明书做测试需求分析，制定测试计划（包括测试分组、测试模块分工、测试时间以及进度安排），组员按分工编写用例，用例编写完成进行审核，审核通过后按测试时用例和功能分工进行测试，测试时考虑浏览器是否兼容，发现bug则提交issue，并对bug进行跟踪直到缺陷可以接受，最后分析测试结果，撰写测试报告。</description><guid isPermaLink="true">https://therain2020.github.io/post/ruan-jian-ce-shi-mian-jing.html</guid><pubDate>Mon, 28 Apr 2025 12:36:18 +0000</pubDate></item><item><title>本地上传项目的最速流程</title><link>https://therain2020.github.io/post/ben-di-shang-chuan-xiang-mu-de-zui-su-liu-cheng.html</link><description>若本地已有项目，想将其上传到新的 GitHub 仓库，可按以下步骤操作：

### 1. 在 GitHub 创建新仓库
- 登录 GitHub 账号，点击右上角的 “+” 号，选择 “New repository”。</description><guid isPermaLink="true">https://therain2020.github.io/post/ben-di-shang-chuan-xiang-mu-de-zui-su-liu-cheng.html</guid><pubDate>Mon, 28 Apr 2025 07:56:54 +0000</pubDate></item><item><title>分布式事务框架：Seata</title><link>https://therain2020.github.io/post/fen-bu-shi-shi-wu-kuang-jia-%EF%BC%9ASeata.html</link><description># 基于Seata框架添加分布式事务

-  项目中很多功能都可以添加分布式事务。</description><guid isPermaLink="true">https://therain2020.github.io/post/fen-bu-shi-shi-wu-kuang-jia-%EF%BC%9ASeata.html</guid><pubDate>Fri, 25 Apr 2025 17:19:06 +0000</pubDate></item><item><title>一些要做的事情</title><link>https://therain2020.github.io/post/yi-xie-yao-zuo-de-shi-qing.html</link><description>1.项目话术：

- [校园快送](https://blog.csdn.net/qq_45195447/article/details/143307640)
- [诚通出行]()

2.信息概论答辩###4月28日上午

3.HSBC 面试预约

4.招商训练营

5.今天对自己的简历进行了大改，部分地方需要进行强化，尤其是①数据是否正确，怎么来的②相对陌生的技术。</description><guid isPermaLink="true">https://therain2020.github.io/post/yi-xie-yao-zuo-de-shi-qing.html</guid><pubDate>Fri, 25 Apr 2025 16:14:29 +0000</pubDate></item><item><title>项目架构</title><link>https://therain2020.github.io/post/xiang-mu-jia-gou.html</link><description># 基于Github三件套设计一个分层架构方案，涵盖内容管理、自动化流程和功能扩展性：

```Text
AIGmeek/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── aigmeek/
│   │   │           ├── config/                # 配置中心（Spring Boot标准）
│   │   │           │   ├── GitHubConfig.java   # OAuth认证配置 
│   │   │           │   └── TemplateConfig.java  # 模板引擎配置 
│   │   │           ├── core/
│   │   │           │   ├── generator/        # 静态生成器（替代Python脚本）
│   │   │           │   │   ├── HtmlGenerator.java  
│   │   │           │   │   └── SitemapBuilder.java  
│   │   │           │   └── processor/       # 内容处理器 
│   │   │           │       ├── IssueParser.java  
│   │   │           │       └── MarkdownConverter.java  
│   │   │           ├── github/               # API交互层 
│   │   │           │   ├── client/
│   │   │           │   │   ├── IssueClient.java   # 实现PyGithub功能 
│   │   │           │   │   └── RepoClient.java  
│   │   │           │   └── model/            # 数据模型（Record类型）
│   │   │           │       └── GIssue.java  
│   │   │           └── web/
│   │   │               └── controller/       # 预览功能API端点 
│   │   │                   └── PreviewController.java  
│   │   └── resources/
│   │       ├── static/                      # 全量保留原前端资源 
│   │       │   ├── css/
│   │       │   │   ├── style.css            # 增强响应式布局 
│   │       │   │   └── dark-mode.css        # 支持2025新CSS特性 
│   │       │   ├── js/
│   │       │   │   ├── plugins/           # 插件体系（热加载）
│   │       │   │   │   ├── lightbox.js     # 图片灯箱优化版 
│   │       │   │   │   └── vercount.js     # 访问统计模块 
│   │       │   │   └── GmeekTOC.js         # 目录生成器 
│   │       │   └── img/                   # 静态资源托管 
│   │       └── templates/                 # Thymeleaf模板 
│   │           ├── fragments/             # 模块化组件 
│   │           │   ├── header.html  
│   │           │   └── comment.html        # 集成utteranc评论 
│   │           ├── post.html               # 文章页（支持SEO优化）
│   │           └── index.html              # 首页（分页逻辑）
│   └── test/                              # 测试套件 
│       └── java/
│           └── com/
│               └── aigmeek/
│                   └── core/
│                       └── generator/      # 生成器单元测试 
├── .github/                               # 自动化流水线 
│   └── workflows/
│       └── gh-pages.yml                   # 深度优化的Java构建流程 
└── HELP.md                                # 新版文档（含AI助手指引）
```

## 一、核心架构分层

### 1.数据获取层

使用Github API Client for Java实现Issue数据抓取
```Java
public class IssueFetcher {
    // 实现基于标签过滤的Issue查询（对应MD文档的标签要求）
    public List&lt;IssueDTO&gt; fetchIssuesByLabel(String repo, String label);
    // 解析Issue正文中的Markdown和元数据（参考post.html 模板）
    public PostContent parseIssueBody(String markdownContent);
}
```

### 2.静态生成层

采用Thymeleaf模板引擎替代Jinja2
```Java
@Component 
public class StaticGenerator {
    // 生成文章页（集成lightbox.js 图片预览功能[13]()）
    public void generatePostPage(PostContent post, Path outputDir);
    // 生成索引页（实现plist.html 的分页逻辑[1]()）
    public void generateIndexPage(List&lt;PostContent&gt; posts, int pageNum); 
}
```

### 3.自动化部署层

集成Github Actions的Java实现方案
```Yaml
# .github/workflows/build.yml  核心配置 
- name: Build with Maven 
  run: mvn -B package --file pom.xml  
- name: Deploy to Pages 
  uses: peaceiris/actions-gh-pages@v3 
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    publish_dir: ./target/generated-site 
```

## 二、关键组件设计

### 1.配置中心

```Java
@Configuration 
public class BlogConfig {
    // 读取类似config.json 的配置（参考requirements.txt 依赖管理[3]()）
    @Value('${blog.baseUrl}')  
    private String baseUrl;
    
    // 集成utteranc评论系统（对应post.html 的评论区块[9]()）
    @Bean 
    public CommentService commentService() {
        return new UtterancCommentImpl();
    }
}
```

### 2.前端资源管理

保留原JS插件体系的集成方式：
```Java
public class AssetManager {
    // 将GmeekTocBot.js 等插件写入生成目录 
    public void copyPluginFiles(Path outputDir) {
        Files.copy('src/main/resources/static/GmeekTOC.js',  
                   outputDir.resolve('js/GmeekTOC.js')); 
    }
}
```

### 3.元数据处理器
```Java
public class MetadataExtractor {
    // 实现类似plist.html 的标签处理逻辑[1]()
    public List&lt;String&gt; extractLabels(JSONObject issueJson) {
        return Arrays.stream(issueJson.getJSONArray('labels')) 
                     .map(label -&gt; label.getString('name')) 
                     .collect(Collectors.toList()); 
    }
}
```

## 三、技术选型建议

![Image](https://github.com/user-attachments/assets/11dd2349-6f0b-4347-9b56-40423140a521)

## 四、典型工作流程

### 1.Issue创建/更新事件触发
```Mermaid
sequenceDiagram 
    Github Issues-&gt;&gt;Java服务: Webhook通知 
    Java服务-&gt;&gt;Github API: 获取Issue详情[2]()
    Github API-&gt;&gt;Java服务: 返回JSON数据 
    Java服务-&gt;&gt;StaticGenerator: 生成HTML（集成footer.html[6]() ）
    StaticGenerator-&gt;&gt;Github Pages: 提交到gh-pages分支 
```


### 2.构建部署流程
```Bash
# 通过Actions实现CI/CD[10]()
mvn clean package 
&amp;&amp; java -jar blog-generator.jar  
&amp;&amp; gh-pages -d target/generated-site 
```

## 五、扩展性设计

### 1.插件机制
```Java
public interface BlogPlugin {
    void apply(PostContent post, TemplateContext context);
}
// 实现类似GmeekVercount的访问统计[5]()
@Component 
public class VisitCounterPlugin implements BlogPlugin {
    public void apply(PostContent post, TemplateContext ctx) {
        ctx.addScript('&lt;script  src='/js/GmeekVercount.js'&gt;&lt;/script&gt;'); 
    }
}
```

### 2.多仓库支持
通过@ConfigurationProperties实现多源配置：
```Java
@ConfigurationProperties(prefix = 'github')
public class RepoConfig {
    private Map&lt;String, RepoProfile&gt; repositories;
    // 支持同时管理多个Github Pages站点 
}
```


ps：看到Gmeek的第一眼我就忘本了，我也想做一个这玩意。</description><guid isPermaLink="true">https://therain2020.github.io/post/xiang-mu-jia-gou.html</guid><pubDate>Tue, 22 Apr 2025 14:01:23 +0000</pubDate></item><item><title>Linux和Windows 在内核上的区别</title><link>https://therain2020.github.io/post/Linux-he-Windows%20-zai-nei-he-shang-de-qu-bie.html</link><description># Linux和Windows 在内核上的区别 
## 什么是内核
## 内核的作用
## 内核如何工作
## Linux如何设计内核
## Windows如何设计内核。</description><guid isPermaLink="true">https://therain2020.github.io/post/Linux-he-Windows%20-zai-nei-he-shang-de-qu-bie.html</guid><pubDate>Tue, 22 Apr 2025 07:03:43 +0000</pubDate></item></channel></rss>